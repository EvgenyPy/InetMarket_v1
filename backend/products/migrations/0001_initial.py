# Generated by Django 4.2.14 on 2024-08-09 07:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
            },
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('megapixel', models.IntegerField(verbose_name='Мегапиксели')),
                ('numbers_of_cameras', models.IntegerField(verbose_name='Количество камер')),
            ],
            options={
                'verbose_name': 'Камера',
                'verbose_name_plural': 'Камеры',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название категории')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Слаг')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_name', models.CharField(max_length=100, verbose_name='Название цвета')),
                ('color_hex_code', models.CharField(max_length=100, verbose_name='Цвет')),
            ],
            options={
                'verbose_name': 'Цвет',
                'verbose_name_plural': 'Цвета',
            },
        ),
        migrations.CreateModel(
            name='Display',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagonal', models.FloatField(verbose_name='Диагональ')),
                ('resolution', models.IntegerField(verbose_name='Разрешение экрана')),
                ('typ_of_display', models.CharField(max_length=100, verbose_name='Тип дисплея')),
            ],
            options={
                'verbose_name': 'Дисплей',
                'verbose_name_plural': 'Дисплеи',
            },
        ),
        migrations.CreateModel(
            name='DisplayWatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagonal', models.FloatField(verbose_name='Диагональ')),
                ('resolution', models.IntegerField(verbose_name='Разрешение экрана')),
                ('typ_of_display', models.CharField(help_text='Цветной или нет', max_length=100, verbose_name='Тип дисплея')),
                ('touch_screen', models.CharField(help_text='да/нет', max_length=100, verbose_name='Сенсорный дисплей')),
            ],
            options={
                'verbose_name': 'Диагональ экрана',
                'verbose_name_plural': 'Диагонали экранов',
            },
        ),
        migrations.CreateModel(
            name='OperatingSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operating_system', models.CharField(max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Операционная система',
                'verbose_name_plural': 'Операционные системы',
            },
        ),
        migrations.CreateModel(
            name='OperatingSystemPhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operating_system', models.CharField(max_length=100, verbose_name='Название')),
                ('version_os', models.CharField(max_length=100, verbose_name='Версия операционной системы')),
            ],
            options={
                'verbose_name': 'Операционная система',
                'verbose_name_plural': 'Операционные системы',
            },
        ),
        migrations.CreateModel(
            name='Processor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processor_name', models.CharField(max_length=100, verbose_name='Название')),
                ('number_of_cores', models.IntegerField(verbose_name='Количество ядер')),
                ('cpu_frequency', models.FloatField(verbose_name='Частота процессора')),
            ],
            options={
                'verbose_name': 'Процессор',
                'verbose_name_plural': 'Процессоры',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('price_before_discount', models.PositiveIntegerField(verbose_name='Цена до скидки')),
                ('discount', models.PositiveIntegerField(blank=True, null=True, verbose_name='Скидка')),
                ('price_after_discount', models.PositiveIntegerField(blank=True, default=models.PositiveIntegerField(verbose_name='Цена до скидки'), null=True, verbose_name='Цена со скидкой')),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/images', verbose_name='Изображение')),
                ('year_release', models.IntegerField(blank=True, null=True, verbose_name='Год выпуска')),
                ('slug', models.SlugField(max_length=100, verbose_name='Ссылка')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.brand', verbose_name='Бренд')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.category', verbose_name='Категория')),
                ('color', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.color', verbose_name='Цвет')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Ram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ram_memory', models.IntegerField(verbose_name='Объем оперативной памяти')),
                ('ram_frequency', models.FloatField(verbose_name='Частота оперативной памяти')),
                ('ram_type', models.CharField(max_length=100, verbose_name='Тип оперативной памяти')),
            ],
            options={
                'verbose_name': 'Оперативная память',
                'verbose_name_plural': 'Оперативная память',
            },
        ),
        migrations.CreateModel(
            name='SpecificHeadphones',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_method', models.CharField(max_length=100, verbose_name='Способ передачи сигнала')),
                ('typ_construction', models.CharField(max_length=100, verbose_name='Тип конструкции')),
                ('sound_circuit_format', models.CharField(max_length=100, verbose_name='Формат звуковой схемы')),
            ],
            options={
                'verbose_name': 'Характеристики гарнитуры',
                'verbose_name_plural': 'Характеристики гарнитур',
            },
        ),
        migrations.CreateModel(
            name='SpecificWatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watertightness', models.CharField(help_text='да/нет', max_length=100, verbose_name='Водонепроницаемость')),
            ],
            options={
                'verbose_name': 'Характеристики часов',
                'verbose_name_plural': 'Характеристики часов',
            },
        ),
        migrations.CreateModel(
            name='ShopingCart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product', verbose_name='Товар')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Корзина',
                'verbose_name_plural': 'Корзины',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=1000, verbose_name='Текст')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Watch',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('case_material', models.CharField(max_length=100, verbose_name='Материал корпуса')),
                ('form_factor', models.CharField(max_length=100, verbose_name='Форма часов')),
                ('battery_life', models.IntegerField(verbose_name='Время автономной работы')),
                ('weight', models.FloatField(verbose_name='Вес')),
                ('operating_system', models.CharField(max_length=100, verbose_name='Операционная система')),
                ('display', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.displaywatch', verbose_name='Экран')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='watchess', to='products.product', verbose_name='Страна производства')),
                ('watertightness', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.specificwatch', verbose_name='Водонепроницаемость')),
            ],
            options={
                'verbose_name': 'Часы',
                'verbose_name_plural': 'Часы',
            },
            bases=('products.product',),
        ),
        migrations.CreateModel(
            name='Smartphone',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('nfc', models.CharField(max_length=100, verbose_name='NFC')),
                ('sim_card', models.CharField(max_length=100, verbose_name='Количество SIM-карт')),
                ('memory_capacity', models.IntegerField(verbose_name='Объем памяти')),
                ('battery', models.IntegerField(verbose_name='Емкость аккумулятора')),
                ('camera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.camera', verbose_name='Камера')),
                ('display', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.display', verbose_name='Экран')),
                ('operating_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.operatingsystemphone', verbose_name='Операционная система')),
                ('processor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.processor', verbose_name='Процессор')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='smartphoness', to='products.product', verbose_name='Страна производства')),
                ('ram', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.ram', verbose_name='Оперативная память')),
            ],
            options={
                'verbose_name': 'Смартфон',
                'verbose_name_plural': 'Смартфоны',
            },
            bases=('products.product',),
        ),
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('keyboard_illuminated', models.BooleanField(verbose_name='Подсветка клавиатуры')),
                ('video_card', models.CharField(max_length=100, verbose_name='Видеокарта')),
                ('battery', models.IntegerField(verbose_name='Емкость аккумулятора')),
                ('battery_life', models.IntegerField(verbose_name='Время автономной работы')),
                ('web_cam', models.CharField(max_length=100, verbose_name='Веб камера')),
                ('weight', models.FloatField(verbose_name='Вес')),
                ('gaming_laptop', models.CharField(max_length=100, verbose_name='Гейминг лаптоп')),
                ('display', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.display', verbose_name='Экран')),
                ('operating_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.operatingsystem', verbose_name='Операционная система')),
                ('processor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.processor', verbose_name='Процессор')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notebookss', to='products.product', verbose_name='Страна производства')),
                ('ram', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.ram', verbose_name='Оперативная память')),
            ],
            options={
                'verbose_name': 'Ноутбук',
                'verbose_name_plural': 'Ноутбуки',
            },
            bases=('products.product',),
        ),
        migrations.CreateModel(
            name='Headphones',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='products.product')),
                ('microphone', models.CharField(max_length=100, verbose_name='Микрофон')),
                ('gaming_headphones', models.CharField(max_length=100, verbose_name='Гейминг гарнитуры')),
                ('illumination', models.CharField(max_length=100, verbose_name='Подсветка')),
                ('sensitivity', models.CharField(max_length=100, verbose_name='Чувствительность')),
                ('min_frequency', models.IntegerField(verbose_name='Минимальная частота')),
                ('max_frequency', models.IntegerField(verbose_name='Максимальная частота')),
                ('connector_for_connection', models.CharField(max_length=100, verbose_name='Коннектор для подключения')),
                ('active_noise_reduction', models.CharField(max_length=100, verbose_name='Активное уменьшение шума')),
                ('cable_length', models.IntegerField(verbose_name='Длина кабеля')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='headphoness', to='products.product', verbose_name='Страна производства')),
                ('specific_headphones', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.specificheadphones', verbose_name='Характеристики')),
            ],
            options={
                'verbose_name': 'Гарнитура',
                'verbose_name_plural': 'Гарнитуры',
            },
            bases=('products.product',),
        ),
    ]
